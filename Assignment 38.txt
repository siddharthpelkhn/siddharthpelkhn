1.
#include<iostream>
#include<list>
using namespace std;
int main()
{
    list<int> l1{1,3,2,5,4};
    l1.empty(); // check if list is empty or not.
    l1.size(); // Returns size of the list.
    l1.sort(); // Sorts the list in ascending order.
    l1.reverse(); // Reverses the list
    l1.remove(2); // list.remove(element);
                  // Removes all occurrences of given elements from the list.
    l1.front(); // Returns the first element of the list.
    l1.back();  // Returns the last element of the list.
    l1.push_back(); // Insert the element at the back (end) to the list.list.push_back(element);
    l1.push_front(); // Inserts the element at the front (beginning) to the list.list.push_front(element);
    l1.pop_back(); // Insert the element at the back (end) to the list.
    l1.pop_front(); // Removes the element from the front (beginning) of the list.

    l1.end(); //Return the iterator pointing first	
    l1.begin(); // and last element of the list

    l1.rbegin();// Return the iterator pointing first and last element
    l1.rend();  // of the list (in reverse order) i.e. first
                // element will be considered as last and last 
                // will be consider as first

    l1.assign(); // list.assign(n, element)

    l1.merge(); // list1.merge(list2);

    l1.unique(); // It removes consecutive elements from the list.
    
    l1.erase(); // list.erase(iterator_position);
                //    OR
                // list.erase(iterator_position1, iterator_position2);
}
2.
#include<iostream>
#include<list>
#include<iterator>
using namespace std;

int main()
{
    list<int> l1;
    list<int> l2;
    list<int> l3;
    // Method 1
    l1.assign({1,2,3,4,5});
    // Method 2
    l2.assign(5,5);
    // Method 3
    l3.assign(l1.begin(),l1.end());
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    for(x=l2.begin();x!=l2.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    for(x=l3.begin();x!=l3.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
3.
#include<iostream>
#include<iterator>
#include<list>

using namespace std;

int main()
{
    list<int> l1;
    l1.assign({2,4,6,8,10});
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
4.
#include<iostream>
#include<iterator>
#include<list>

using namespace std;

int main()
{
    list<int> l1;
    l1.assign({2,4,6,8,10});
    l1.reverse();
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    l1.reverse();
    return 0;
}
5.
#include<iostream>
#include<iterator>
#include<list>

using namespace std;

int main()
{
    list<int> l1;
    int temp,n;
    cout<<"How many element you want to insert:";
    cin>>n;
    for(int i=0;i<n;i++)
    {
        cout<<"Enter "<<i+1<<" element:";
        cin>>temp;
        l1.push_back(temp);
    }
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
6.
#include<iostream>
#include<iterator>
#include<list>

using namespace std;

int main()
{
    list<int> l1;
    l1.assign({2,4,6,8,10});
    cout<<"Front element = "<<l1.front()<<endl;
    cout<<"Back element = "<<l1.back()<<endl;
    return 0;
}
7.
#include<iostream>
#include<iterator>
#include<list>
using namespace std;
int main()
{
    list<int> l1;
    l1.assign({4,6,8});
    cout<<"list After pushing element in front"<<endl;
    l1.push_front(2);
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    cout<<"list After pushing element in end"<<endl;
    l1.push_back(10);
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
8.
#include<iostream>
#include<iterator>
#include<list>

using namespace std;

int main()
{
    list<int> l1;
    l1.assign({2,4,6,8,10});
    cout<<"Remove specific element:"<<endl;
    l1.remove(8); // It will remove only element 8 from list.
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    l1.erase(l1.begin(),l1.end()); // It will remove all element of list.
    return 0;
}
9.
#include<iostream>
#include<iterator>
#include<list>
using namespace std;
int main()
{
    list<int> l1;
    l1.assign({2,2,2,4,6,6,8,10});
    l1.unique();
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
10.
#include<iostream>
#include<list>
#include<iterator>

using namespace std;

int main()
{
    list<int> l1;
    list<int> l2;
    list<int> l3;
    l1.assign({1,2,3,4,5});
    l2.assign({6,7,8,9,10});
    l1.merge(l2);
    l3.assign(l1.begin(),l1.end());
    list<int>::iterator x;
    for(x=l3.begin();x!=l3.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
11.
#include<iostream>
#include<list>
#include<iterator>

using namespace std;

int main()
{
    list<int> l1;
    list<int> l2;
    l1.assign({1,2,3,4,5});
    l1.insert(l1.begin(),6); //(position before which the new element is to be inserted,element)
    l2.assign(l1.begin(),l1.end());
    list<int>::iterator x;
    for(x=l2.begin();x!=l2.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
12.
#include<iostream>
#include<array>
#include<list>
#include<iterator>
using namespace std;
int main()
{
    list<int> l1;
    array<int,5> arr{1,2,3,4,5};
    l1.assign(arr.begin(),arr.end());
    list<int>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
13.
#include<iostream>
#include<array>
#include<list>
#include<iterator>
using namespace std;
int main()
{
    list<char> l1;
    l1.push_back('A');
    l1.push_back('B');
    l1.push_back('C');
    l1.push_back('D');
    l1.push_back('E');
    list<char>::iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
14.
#include<iostream>
#include<array>
#include<list>
#include<iterator>
using namespace std;
int main()
{
    list<char> l1;
    for(char i='A';i<='Z';i++)
    {
        l1.push_back(i);
    }
    list<char>::const_iterator x;
    for(x=l1.begin();x!=l1.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}