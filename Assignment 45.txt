1.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(2);
    m.insert(1);
    m.insert(2);
    m.insert(6);
    m.insert(5);
    m.insert(9);
    multiset<int>::iterator x;
    for(x=m.begin();x!=m.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
2.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(2);
    m.insert(1);
    m.insert(2);
    m.insert(6);
    m.insert(5);
    m.insert(9);
    for(auto x=m.rbegin();x!=m.rend();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
3.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(2);
    m.insert(1);
    m.insert(2);
    m.insert(6);
    m.insert(5);
    m.insert(9);

    cout<<m.size()<<" ";
    return 0;
}
4.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(2);
    m.insert(1);
    m.insert(2);
    m.insert(6);
    m.insert(5);
    m.insert(9);

    cout<<"Max size = "<<m.max_size()<<" ";
    return 0;
}
5.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(2);
    m.insert(1);
    m.insert(2);
    m.insert(6);
    m.insert(5);
    m.insert(9);
    if(!m.empty())
    {
        cout<<"Multi-set is not empty!"<<endl;
    }else{
        cout<<"Multiset is empty!";
    }
    return 0;
}
6.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(4);
    m.insert(2);
    m.insert(3);
    m.insert(2);
    m.insert(1);
    multiset<int>::iterator x;
    for(x=m.begin();x!=m.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
7.
#include<iostream>
#include<set>
#include<iterator>
using namespace std;
int main()
{
    multiset<int> m;
    m.insert(4);
    m.insert(2);
    m.insert(3);
    m.insert(2);
    m.insert(1);
    multiset<int>::iterator x;
    m.erase(m.begin(),m.end()); // It will remove all elements.
    for(x=m.begin();x!=m.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
8.
#include<bits/stdc++.h>
using namespace std;
int main()
{
    multiset<int> s{1, 2, 3, 4, 2, 5, 2, 6, 7, 2};
    cout<<"Original multiset:"<<endl;
    for(auto x=s.begin();x!=s.end();x++)
    {
        cout<<*x<<" ";
    }
    int x;
    cout<<endl<<"Enter number whose occurance you want to remove: ";
    cin>>x;
    s.erase(x);
    cout<<"Multiset after removal:"<<endl;
    for(auto x=s.begin();x!=s.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
9.
#include<bits/stdc++.h>
using namespace std;
int main()
{
    multiset<int> s{1, 2, 3, 4, 2, 5, 2, 6, 7, 2};
    cout<<"Original multiset:"<<endl;
    for(auto x=s.begin();x!=s.end();x++)
    {
        cout<<*x<<" ";
    }
    int x;
    cout<<endl<<"Enter number whose occurance you want to remove: ";
    cin>>x;
    auto it = s.find(x);
    if(it!=s.end())
    {
        s.erase(it);
    }
    cout<<"Multiset after removal:"<<endl;
    for(auto x=s.begin();x!=s.end();x++)
    {
        cout<<*x<<" ";
    }
    return 0;
}
10.
#include<bits/stdc++.h>
using namespace std;
int main()
{
    multiset<int> s1{1,2,3};
    multiset<int> s2{1,1,2,3};
    cout<<"Multiset 1"<<endl;
    for(auto x=s1.begin();x!=s1.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    cout<<"Multiset 2"<<endl;
    for(auto x=s2.begin();x!=s2.end();x++)
    {
        cout<<*x<<" ";
    }
    cout<<endl;
    bool x = equal(s1.begin(),s1.end(),s2.begin(),s2.end());
    if(x)
    {
        cout<<"Multiset are equal"<<endl;
    }else{
        cout<<"Multiset are unequal"<<endl;
    }
    return 0;
}
